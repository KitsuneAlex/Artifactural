buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    }
}

plugins {
  id 'java-library'
  id 'maven-publish'
  id 'eclipse'
  id 'net.minecrell.licenser' version '0.3'
}

group = 'net.minecraftforge'

version = gitVersion()
println('Version: ' + version + ' Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api
    shared
    gradlecomp
    java9
}

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    sharedImplementation.extendsFrom apiImplementation
    gradlecompImplementation.extendsFrom sharedImplementation

    compile.extendsFrom sharedImplementation
    compile.extendsFrom gradlecompImplementation
}

dependencies {
    java9Implementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }
    
    sharedImplementation sourceSets.api.output

    gradlecompImplementation sourceSets.shared.output
    gradlecompImplementation gradleApi()
    gradlecompImplementation 'com.google.guava:guava:30.1-jre'

    compile sourceSets.api.output
    compile sourceSets.shared.output
    compile sourceSets.gradlecomp.output
}


tasks.withType(JavaCompile) {
    options.encoding = 'utf-8'
    options.deprecation = true
}
java {
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

project(':artifactural9') {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    group = rootProject.group
    java.toolchain.languageVersion = JavaLanguageVersion.of(9)

    sourceSets {
        java9.java.srcDirs = [rootProject.file('src/java9').getAbsolutePath()]
    }
    
    eclipse {
        project {
            name rootProject.name + '9'
            linkedResource name: 'java9', type: '2', location: rootProject.file('src/java9').getAbsolutePath()
        }
        jdt {
            sourceCompatibility = targetCompatibility = 9
        }
    }
    
    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(9)
        }
    }
}



jar {
    from sourceSets.api.output
    from sourceSets.shared.output
    from(sourceSets.gradlecomp.output)

    into('META-INF/versions/9') {
        from project(':artifactural9').sourceSets.java9.output
    }
    
    manifest {
        attributes(
            'Multi-Release': 'true'
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.api.allSource
    from sourceSets.shared.allSource
    from sourceSets.gradlecomp.allSource
}


license {
    header = file("$rootDir/LICENSE-header.txt")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tasks.sourcesJar
            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
                name = project.archivesBaseName
                packaging = 'jar'
                description = 'A Gradle artifact processing and management tool'
                url = 'https://github.com/MinecraftForge/Artifactural/'

                scm {
                    url = 'https://github.com/MinecraftForge/Artifactural/'
                    connection = 'scm:git:git://github.com/MinecraftForge/Artifactural.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/Artifactural.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/Artifactural/issues'
                }
                licenses {
                    license {
                        name = 'LGPL-2.1'
                        url = 'https://www.gnu.org/licenses/lgpl-2.1.txt'
                        distribution = 'repo'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty('mavenPassword')) {
                credentials {
                    username = project.properties.mavenUser
                    password = project.properties.mavenPassword
                }
                url 'https://files.minecraftforge.net/maven/manage/upload'
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}

def gitInfo(dir) {
    String.metaClass.rsplit = { String del, int limit = -1 ->
        def lst = new ArrayList()
        def x = 0, idx
        def tmp = delegate
        while ((idx = tmp.lastIndexOf(del)) != -1 && (limit == -1 || x++ < limit)) {
            lst.add(0, tmp.substring(idx + del.length(), tmp.length()))
            tmp = tmp.substring(0, idx)
        }
        lst.add(0, tmp)
        return lst
    }
    
    def git = null
    try {
        git = org.eclipse.jgit.api.Git.open(dir)
    } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) {
        return [
            tag: '0.0',
            offset: '0',
            hash: '00000000',
            branch: 'master',
            commit: '0000000000000000000000',
            abbreviatedId: '00000000'
        ]
    }
    def desc = git.describe().setLong(true).setTags(true).call().rsplit('-', 2)
    def head = git.repository.exactRef('HEAD')
    def longBranch = head.symbolic ? head?.target?.name : null // matches Repository.getFullBranch() but returning null when on a detached HEAD

    def ret = [:]
    ret.tag = desc[0]
    ret.offset = desc[1]
    ret.hash = desc[2]
    ret.branch = longBranch != null ? org.eclipse.jgit.lib.Repository.shortenRefName(longBranch) : null
    ret.commit = org.eclipse.jgit.lib.ObjectId.toString(head.objectId)
    ret.abbreviatedId = head.objectId.abbreviate(8).name()
    
    return ret
}

def gitVersion() {
    def info = gitInfo(rootProject.file('.'))
    def branch = info.branch
    if (branch != null && branch.startsWith('pulls/'))
        branch = 'pr' + branch.rsplit('/', 1)[1]
    if (branch in [null, 'master', 'HEAD'])
        return "${info.tag}.${info.offset}".toString()
    return "${info.tag}.${info.offset}-${branch}".toString()
}

